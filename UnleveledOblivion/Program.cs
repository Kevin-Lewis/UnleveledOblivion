using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Oblivion;
using Noggog;
using System.Linq;
using System.Runtime;
using System.Text.RegularExpressions;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins;

namespace UnleveledOblivion
{
    public class Program
    {
        private static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IOblivionMod, IOblivionModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.Oblivion, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<IOblivionMod, IOblivionModGetter> state)
        {
            OutputNPCStats(state, "_old");
            OutputCreatureStats(state, "_old");
            UpdateGameSettings(state);
            UpdateCreatureLeveledLists(state);
            UpdateCreatures(state);
            UpdateNPCs(state);
            OutputNPCStats(state, "_new");
            OutputCreatureStats(state, "_new");
        }

        public static void UpdateGameSettings(IPatcherState<IOblivionMod, IOblivionModGetter> state)
        {
            foreach (var gsGettor in state.LoadOrder.PriorityOrder.GameSetting().WinningOverrides().ToArray())
            {
                var setting = gsGettor.DeepCopy();
                if (setting.EditorID == "iLevCreaLevelDifferenceMax")
                {
                    setting = new GameSettingInt(setting.FormKey)
                    {
                        EditorID = "iLevCreaLevelDifferenceMax",
                        Data = 999
                    };
                    state.PatchMod.GameSettings.Set(setting);
                }
            }
        }

        public static void UpdateCreatureLeveledLists(IPatcherState<IOblivionMod, IOblivionModGetter> state)
        {
            foreach (var clGetter in state.LoadOrder.PriorityOrder.LeveledCreature().WinningOverrides())
            {
                // Add it to the patch
                var creatureList = state.PatchMod.LeveledCreatures.GetOrAddAsOverride(clGetter);

                // Adjust
                foreach (var entry in creatureList.Entries)
                {
                    entry.Level = 1;
                }
            }
        }

        public static void UpdateCreatures(IPatcherState<IOblivionMod, IOblivionModGetter> state)
        {
            var highestLevels = new Dictionary<string, (short, Creature)>();
            var regex = new Regex(@"\d+$");  // regex to match trailing numbers

            // Read the creature file and create a dictionary
            var path = Path.Combine(AppContext.BaseDirectory, "Data", "Creatures.txt");
            var creatureLevelsFromFile = new Dictionary<string, short>();
            if (File.Exists(path))
            {
                creatureLevelsFromFile = File.ReadAllLines(path)
                    .Where(line => !string.IsNullOrWhiteSpace(line) && !line.TrimStart().StartsWith("//"))
                    .Select(line => line.Split(' '))
                    .ToDictionary(parts => parts[0], parts => short.Parse(parts[1]));
            }

            foreach (var creatureGetter in state.LoadOrder.PriorityOrder.Creature().WinningOverrides())
            {
                Creature creature = state.PatchMod.Creatures.GetOrAddAsOverride(creatureGetter) ?? throw new Exception("Could not add creature as override.");
                if (creature.Configuration is null) { continue; }

                // Adjust
                if (creature.Configuration.Flags.HasFlag(Creature.CreatureFlag.PCLevelOffset))
                {
                    creature.Configuration.Flags -= Creature.CreatureFlag.PCLevelOffset;
                    CalculateCreatureLevel(creature, isStatic: false, creatureLevelsFromFile);
                }
                else
                {
                    CalculateCreatureLevel(creature, isStatic: true, creatureLevelsFromFile);
                }

                CheckForHigherLevelVariant(creature, highestLevels, regex);
            }
        }

        public static void CalculateCreatureLevel(Creature creature, bool isStatic, Dictionary<string, short> creatureLevelsFromFile)
        {
            if (creature.Configuration is null || creature.EditorID is null) { return; }

            // If the creature is in the file, use the level from the file
            if (creatureLevelsFromFile.TryGetValue(creature.EditorID, out short levelFromFile))
            {
                creature.Configuration.LevelOffset = levelFromFile;
                return;
            }

            short startingLevel = creature.Configuration.LevelOffset;
            creature.Configuration.LevelOffset = Settings.CreatureSettings.BaseLevel;
            creature.Configuration.LevelOffset += AdjustLevelOffsetBySoulType(creature);
            if (!isStatic)
            {
                _ = startingLevel switch
                {
                    _ when startingLevel < 0 => creature.Configuration.LevelOffset -= Settings.CreatureSettings.ScaledBelowPlayerOffset,
                    _ when startingLevel > 0 => creature.Configuration.LevelOffset += Settings.CreatureSettings.ScaledAbovePlayerOffset,
                    _ => creature.Configuration.LevelOffset += 0
                };
            }
            creature.Configuration.LevelOffset = Math.Max((short)1, Math.Min((short)50, creature.Configuration.LevelOffset));
        }


        public static void CheckForHigherLevelVariant(Creature creature, Dictionary<string, (short, Creature)> highestLevels, Regex regex)
        {
            if (creature.Configuration is null || creature.EditorID is null || creature.Data  is null) { return; }
            var idWithoutNumber = regex.Replace(creature.EditorID, "");
            var compositeKey = idWithoutNumber + "_" + creature.Name;

            if (highestLevels.TryGetValue(compositeKey, out (short, Creature) previousHighest))
            {
                if (creature.Configuration.LevelOffset > previousHighest.Item1 && previousHighest.Item2.Configuration is not null && previousHighest.Item2.Data is not null)
                {
                    previousHighest.Item2.Configuration.LevelOffset = creature.Configuration.LevelOffset;
                    previousHighest.Item2.Data.SoulLevel = (SoulLevel)Math.Max((byte)creature.Data.SoulLevel, (byte)previousHighest.Item2.Data.SoulLevel);
                    highestLevels[compositeKey] = (creature.Configuration.LevelOffset, creature);
                }
                else if (previousHighest.Item2.Data is not null)
                {
                    creature.Configuration.LevelOffset = previousHighest.Item1;
                    creature.Data.SoulLevel = (SoulLevel)Math.Max((byte)creature.Data.SoulLevel, (byte)previousHighest.Item2.Data.SoulLevel);
                }
            }
            else
            {
                highestLevels[compositeKey] = (creature.Configuration.LevelOffset, creature);
            }
        }

        public static short AdjustLevelOffsetBySoulType(Creature creature)
        {
            var level = creature?.Data?.SoulLevel;
            switch (level)
            {
                case SoulLevel.None:
                    return 0;
                case SoulLevel.Petty: 
                    return Settings.CreatureSettings.PettySoulOffset;
                case SoulLevel.Lesser:
                    return Settings.CreatureSettings.LesserSoulOffset;
                case SoulLevel.Common:
                    return Settings.CreatureSettings.CommonSoulOffset;
                case SoulLevel.Greater: 
                    return Settings.CreatureSettings.GreaterSoulOffset;
                case SoulLevel.Grand:
                    return Settings.CreatureSettings.GrandSoulOffset;
                default:
                    return 0;
            }
        }

        public static void UpdateNPCs(IPatcherState<IOblivionMod, IOblivionModGetter> state)
        {
            // Read the creature file and create a dictionary
            var path = Path.Combine(AppContext.BaseDirectory, "Data", "NPCs.txt");
            var npcLevelsFromFile = new Dictionary<string, short>();
            if (File.Exists(path))
            {
                npcLevelsFromFile = File.ReadAllLines(path)
                    .Where(line => !string.IsNullOrWhiteSpace(line) && !line.TrimStart().StartsWith("//"))
                    .Select(line => line.Split(' '))
                    .ToDictionary(parts => parts[0], parts => short.Parse(parts[1]));
            }

            foreach (var npcGetter in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                // Add it to the patch
                Npc npc = state.PatchMod.Npcs.GetOrAddAsOverride(npcGetter) ?? throw new Exception("Could not add npc as override.");

                // Adjust
                if (npc?.Configuration?.Flags is not null)
                {
                    if (npc.Configuration.Flags.HasFlag(Npc.NpcFlag.PCLevelOffset))
                    {
                        npc.Configuration.Flags -= Npc.NpcFlag.PCLevelOffset;
                        CalculateNPCLevel(npc, state.LinkCache, isStatic: false, npcLevelsFromFile);
                    }
                    else
                    {
                        CalculateNPCLevel(npc, state.LinkCache, isStatic: true, npcLevelsFromFile);
                    }
                    if (!npc.Configuration.Flags.HasFlag(Npc.NpcFlag.AutoCalcStats))
                    {
                        npc.Configuration.Flags.SetFlag(Npc.NpcFlag.AutoCalcStats, true);
                    }
                }
            }
        }

        public static void CalculateNPCLevel(Npc npc, ILinkCache linkCache, bool isStatic, Dictionary<string, short> npcLevelsFromFile)
        {
            if (npc.Configuration is null || npc.EditorID is null) { return; }

            // If the creature is in the file, use the level from the file
            if (npcLevelsFromFile.TryGetValue(npc.EditorID, out short levelFromFile))
            {
                npc.Configuration.LevelOffset = levelFromFile;
                return;
            }

            short startingLevel = npc.Configuration.LevelOffset;
            npc.Configuration.LevelOffset = Settings.NPCSettings.BaseLevel;
            if (!isStatic)
            {
                _ = startingLevel switch
                {
                    _ when startingLevel < 0 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier1Offset,
                    _ when startingLevel <= 0 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier2Offset,
                    _ when startingLevel <= 1 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier3Offset,
                    _ when startingLevel <= 2 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier4Offset,
                    _ when startingLevel <= 3 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier5Offset,
                    _ when startingLevel <= 4 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier6Offset,
                    _ when startingLevel <= 5 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier7Offset,
                    _ when startingLevel <= 6 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier8Offset,
                    _ when startingLevel <= 50 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier9Offset,
                    _ => npc.Configuration.LevelOffset += 0
                };
            }
            else
            {
                _ = startingLevel switch
                {
                    _ when startingLevel <= 2 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier1Offset,
                    _ when startingLevel <= 5 => npc.Configuration.LevelOffset += 0,
                    _ when startingLevel <= 10 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier2Offset,
                    _ when startingLevel <= 20 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier3Offset,
                    _ when startingLevel <= 50 => npc.Configuration.LevelOffset += Settings.NPCSettings.Tier9Offset,
                    _ => npc.Configuration.LevelOffset += 0
                };
            }

            AdjustLevelByClass(npc, linkCache);
            npc.Configuration.LevelOffset = Math.Max((short)1, Math.Min((short)50, npc.Configuration.LevelOffset));
        }

        public static void AdjustLevelByClass(Npc npc, ILinkCache linkCache)
        {
            IClassGetter? npcClass = npc.Class.TryResolve(linkCache);
            if (npcClass is null || npcClass?.EditorID is null || npc?.Configuration?.LevelOffset is null) { return; }
            if (npcClass.EditorID.ToLower().Contains("guard") || npcClass.EditorID.ToLower().Contains("soldier"))
            {
                npc.Configuration.LevelOffset = Settings.NPCSettings.ClassSettings.GuardLevel;
            }
        }

        public static void OutputNPCStats(IPatcherState<IOblivionMod, IOblivionModGetter> state, string extension = "")
        {
            var level40s = new List<string>();
            var level30s = new List<string>();
            var level20s = new List<string>();
            var level10s = new List<string>();
            var level00s = new List<string>();
            var offset10Plus = new List<string>();
            var offset7Through9 = new List<string>();
            var offset5Through6 = new List<string>();
            var offset3Through4 = new List<string>();
            var offset1Through2 = new List<string>();
            var offset0 = new List<string>();
            var offsetNegative = new List<string>();
            foreach (var npcGetter in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                var npc = npcGetter.DeepCopy();
                if (npc?.Configuration is not null && npc?.Name is not null &&npc?.EditorID is not null && npc?.Configuration?.LevelOffset is not null && npc?.Configuration?.Flags is not null)
                {
                    if (!npc.EditorID.ToLower().Contains("test"))
                    {
                        if (!(npc.Configuration.Flags.HasFlag(Npc.NpcFlag.PCLevelOffset)))
                        {
                            if (npc.Configuration.LevelOffset >= 40)
                            {
                                level40s.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else if (npc.Configuration.LevelOffset >= 30)
                            {
                                level30s.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else if (npc.Configuration.LevelOffset >= 20)
                            {
                                level20s.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else if (npc.Configuration.LevelOffset >= 10)
                            {
                                level10s.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else
                            {
                                level00s.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                        }
                        else
                        {
                            if (npc.Configuration.LevelOffset >= 10)
                            {
                                offset10Plus.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else if (npc.Configuration.LevelOffset >= 7)
                            {
                                offset7Through9.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else if (npc.Configuration.LevelOffset >= 5)
                            {
                                offset5Through6.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else if (npc.Configuration.LevelOffset >= 3)
                            {
                                offset3Through4.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else if (npc.Configuration.LevelOffset >= 1)
                            {
                                offset1Through2.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else if (npc.Configuration.LevelOffset >= 0)
                            {
                                offset0.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                            else
                            {
                                offsetNegative.Add($"{npc.Name}:{npc.EditorID}:{npc.Configuration.LevelOffset}");
                            }
                        }
                    }
                }               
            }

            string downloadsFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");

            // Write lists to files in the Downloads directory
            File.WriteAllLines(Path.Combine(downloadsFolder, $"level40s{extension}.txt"), level40s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"level30s{extension}.txt"), level30s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"level20s{extension}.txt"), level20s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"level10s{extension}.txt"), level10s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"level00s{extension}.txt"), level00s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"offset10Plus{extension}.txt"), offset10Plus.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"offset7Through9{extension}.txt"), offset7Through9.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"offset5Through6{extension}.txt"), offset5Through6.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"offset3Through4{extension}.txt"), offset3Through4.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"offset1Through2{extension}.txt"), offset1Through2.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"offset0{extension}.txt"), offset0.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"offsetNegative{extension}.txt"), offsetNegative.OrderByDescending(x => short.Parse(x.Split(":")[2])));

        }

        public static void OutputCreatureStats(IPatcherState<IOblivionMod, IOblivionModGetter> state, string extension = "")
        {
            var level40s = new List<string>();
            var level30s = new List<string>();
            var level20s = new List<string>();
            var level10s = new List<string>();
            var level00s = new List<string>();
            var offset10Plus = new List<string>();
            var offset7Through9 = new List<string>();
            var offset5Through6 = new List<string>();
            var offset3Through4 = new List<string>();
            var offset1Through2 = new List<string>();
            var offset0 = new List<string>();
            var offsetNegative = new List<string>();
            foreach (var creatureGetter in state.LoadOrder.PriorityOrder.Creature().WinningOverrides())
            {
                var creature = creatureGetter.DeepCopy();
                if (creature?.Configuration is not null && creature?.Name is not null && creature?.EditorID is not null && creature?.Configuration?.LevelOffset is not null && creature?.Configuration?.Flags is not null)
                {
                    if (!creature.EditorID.ToLower().Contains("test"))
                    {
                        if (!(creature.Configuration.Flags.HasFlag(Creature.CreatureFlag.PCLevelOffset)))
                        {
                            if (creature.Configuration.LevelOffset >= 40)
                            {
                                level40s.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else if (creature.Configuration.LevelOffset >= 30)
                            {
                                level30s.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else if (creature.Configuration.LevelOffset >= 20)
                            {
                                level20s.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else if (creature.Configuration.LevelOffset >= 10)
                            {
                                level10s.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else
                            {
                                level00s.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                        }
                        else
                        {
                            if (creature.Configuration.LevelOffset >= 10)
                            {
                                offset10Plus.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else if (creature.Configuration.LevelOffset >= 7)
                            {
                                offset7Through9.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else if (creature.Configuration.LevelOffset >= 5)
                            {
                                offset5Through6.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else if (creature.Configuration.LevelOffset >= 3)
                            {
                                offset3Through4.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else if (creature.Configuration.LevelOffset >= 1)
                            {
                                offset1Through2.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else if (creature.Configuration.LevelOffset >= 0)
                            {
                                offset0.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                            else
                            {
                                offsetNegative.Add($"{creature.Name}:{creature.EditorID}:{creature.Configuration.LevelOffset}");
                            }
                        }
                    }
                }
            }

            string downloadsFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");

            // Write lists to files in the Downloads directory
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_level40s{extension}.txt"), level40s.OrderByDescending(x => short.Parse(x.Split(":")[2])));               
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_level30s{extension}.txt"), level30s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_level20s{extension}.txt"), level20s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_level10s{extension}.txt"), level10s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_level00s{extension}.txt"), level00s.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_offset10Plus{extension}.txt"), offset10Plus.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_offset7Through9{extension}.txt"), offset7Through9.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_offset5Through6{extension}.txt"), offset5Through6.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_offset3Through4{extension}.txt"), offset3Through4.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_offset1Through2{extension}.txt"), offset1Through2.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_offset0{extension}.txt"), offset0.OrderByDescending(x => short.Parse(x.Split(":")[2])));
            File.WriteAllLines(Path.Combine(downloadsFolder, $"c_offsetNegative{extension}.txt"), offsetNegative.OrderByDescending(x => short.Parse(x.Split(":")[2])));

        }
    }
}
